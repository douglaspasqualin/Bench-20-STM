#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(tg$V1 / 64)
#calculate page
tg$page <- as.vector(tg$V1 / 4096)
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
sapply(tg, function(x) length(unique(as.vector(tg$page))))
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(tg$V1 / 64)
#calculate page
tg$page <- as.vector(tg$V1 / 4096)
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
sapply(tg, function(x) length(unique(as.vector(tg$page))))
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(tg$V1 / 64)
#calculate page
tg$page <- as.vector(tg$V1 / 4096)
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
sapply(tg, function(x) length(unique(tg$page)))
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(tg$V1 / 64)
#calculate page
tg$page <- as.vector(tg$V1 / 4096)
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
sapply(tg, function(x) length(unique(tg$page)))
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(tg$V1 / 64)
#calculate page
tg$page <- as.vector(tg$V1 / 4096)
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
length(unique(tg$page)))
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(tg$V1 / 64)
#calculate page
tg$page <- as.vector(tg$V1 / 4096)
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
length(unique(tg$page))
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(tg$V1 / 64)
#calculate page
tg$page <- as.vector(tg$V1 / 4096)
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
unique(tg$page)
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(tg$V1 / 64)
#calculate page
tg$page <- as.vector(tg$V1 / 4096)
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
unique(as.factor(tg$page))
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(tg$V1 / 64)
#calculate page
tg$page <- as.vector(tg$V1 / 4096)
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
duplicated(tg$page, fromLast=TRUE)
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(tg$V1 / 64)
#calculate page
tg$page <- as.vector(tg$V1 / 4096)
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
duplicated(tg$page)
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(tg$V1 / 64)
#calculate page
tg$page <- as.vector(tg$V1 / 4096)
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
table(tg$page)
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(tg$V1 / 64)
#calculate page
tg$page <- as.vector(Trunc(tg$V1 / 4096))
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
table(tg$page)
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(Trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(Trunc(tg$V1 / 4096))
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
View(tg)
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(Trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(Trunc(tg$V1 / 4096))
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
View(tg)
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
unique(tg$page)
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
length(unique(tg$page))
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
length(unique(tg$page))
sprintf("Filename: %s", fileName)
sprintf("Distinct Addresses: %d", length(unique(tg$V1)))
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#Total accesses
total <- sum(tg$V3)
print(total)
#Get all duplicated cache ines
#tg2 <- tg[duplicated(tg$cache),]
#Filter main table, to show only duplicated cache lines
#test <- filter(tg, cache %in% tg2$cache)
#sum(teste$V3)
#sum(tg[!(duplicated(tg$page)|duplicated(tg$page, fromLast=TRUE)),3])
#sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
length(unique(tg$page))
sprintf("Filename: %s", fileName)
sprintf("Distinct Addresses: %d", length(unique(tg$V1)))
sprintf("Distinct cache lines: %d", length(unique(tg$cache)))
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#sprintf("Filename: %s", fileName)
sprintf("Distinct Addresses: %d", length(unique(tg$V1)))
sprintf("Distinct cache lines: %d", length(unique(tg$cache)))
sprintf("Distinct pages: %d", length(unique(tg$page)))
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#sprintf("Filename: %s", fileName)
sprintf("Distinct Addresses: %d", length(unique(tg$V1)))
sprintf("Distinct cache lines: %d", length(unique(tg$cache)))
sprintf("Distinct pages: %d", length(unique(tg$page)))
sprintf("Total accesses: %d", sum(tg$V3))
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#sprintf("Filename: %s", fileName)
sprintf("Distinct Addresses: %d", length(unique(tg$V1)))
sprintf("Distinct cache lines: %d", length(unique(tg$cache)))
sprintf("Distinct pages: %d", length(unique(tg$page)))
sprintf("Total accesses: %d", sum(tg$V3))
sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('kmeans_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#sprintf("Filename: %s", fileName)
sprintf("Distinct Addresses: %d", length(unique(tg$V1)))
sprintf("Distinct cache lines: %d", length(unique(tg$cache)))
sprintf("Distinct pages: %d", length(unique(tg$page)))
sprintf("Total accesses: %d", sum(tg$V3))
100 - sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('bayes_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#sprintf("Filename: %s", fileName)
sprintf("Distinct Addresses: %d", length(unique(tg$V1)))
sprintf("Distinct cache lines: %d", length(unique(tg$cache)))
sprintf("Distinct pages: %d", length(unique(tg$page)))
sprintf("Total accesses: %d", sum(tg$V3))
100 - sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('bayes_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#sprintf("Filename: %s", fileName)
sprintf("Distinct Addresses: %d", length(unique(tg$V1)))
sprintf("Distinct cache lines: %d", length(unique(tg$cache)))
sprintf("Distinct pages: %d", length(unique(tg$page)))
sprintf("Total accesses: %d", sum(tg$V3))
sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('bayes_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#sprintf("Filename: %s", fileName)
sprintf("Distinct Addresses: %d", length(unique(tg$V1)))
sprintf("Distinct cache lines: %d", length(unique(tg$cache)))
sprintf("Distinct pages: %d", length(unique(tg$page)))
total <- sum(tg$V3)
sprintf("Total accesses: %d", total)
sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('bayes_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#sprintf("Filename: %s", fileName)
sprintf("Distinct Addresses: %d", length(unique(tg$V1)))
sprintf("Distinct cache lines: %d", length(unique(tg$cache)))
sprintf("Distinct pages: %d", length(unique(tg$page)))
totalAccesses <- sum(tg$V3)
sprintf("Total accesses: %d", totalAccesses)
totalAccessesDuplicatedCacheLines <- totalAccesses - sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('bayes_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#sprintf("Filename: %s", fileName)
sprintf("Distinct Addresses: %d", length(unique(tg$V1)))
sprintf("Distinct cache lines: %d", length(unique(tg$cache)))
sprintf("Distinct pages: %d", length(unique(tg$page)))
totalAccesses <- sum(tg$V3)
sprintf("Total accesses: %d", totalAccesses)
totalAccessesDuplicatedCacheLines <- totalAccesses - sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
print(totalAccessesDuplicatedCacheLines * 100 / totalAccesses)
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('bayes_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#sprintf("Filename: %s", fileName)
sprintf("Distinct Addresses: %d", length(unique(tg$V1)))
sprintf("Distinct cache lines: %d", length(unique(tg$cache)))
sprintf("Distinct pages: %d", length(unique(tg$page)))
totalAccesses <- sum(tg$V3)
sprintf("Total accesses: %d", totalAccesses)
totalAccessesDuplicatedCacheLines <- totalAccesses - sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
sprintf("Percent of lines with false sharing: %d", (totalAccessesDuplicatedCacheLines * 100) / totalAccesses)
library(dplyr)
setwd("/home/douglas/GitRepo/Bench-20-STM/Samples/Memory Info")
tg <- read.table('bayes_memoryInfo_64.txt', sep = "\t", header = FALSE)
#calculate cache line
tg$cache <- as.vector(trunc(tg$V1 / 64))
#calculate page
tg$page <- as.vector(trunc(tg$V1 / 4096))
#sprintf("Filename: %s", fileName)
sprintf("Distinct Addresses: %d", length(unique(tg$V1)))
sprintf("Distinct cache lines: %d", length(unique(tg$cache)))
sprintf("Distinct pages: %d", length(unique(tg$page)))
totalAccesses <- sum(tg$V3)
sprintf("Total accesses: %d", totalAccesses)
totalAccessesDuplicatedCacheLines <- totalAccesses - sum(tg[!(duplicated(tg$cache)|duplicated(tg$cache, fromLast=TRUE)),3])
sprintf("Percent of lines with false sharing: %f", (totalAccessesDuplicatedCacheLines * 100) / totalAccesses)
